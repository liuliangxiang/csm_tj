package com.example.csm.mainset;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import android.R.integer;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.CornerPathEffect;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PathEffect;
import android.graphics.Point;
import android.graphics.Rect;
import android.provider.Settings;
import android.util.Log;

import com.example.csm.Csmmain;
import com.example.csm.R;
public class mainset {
	public static final int DOUBLETYPE=0;
	public static final int SCITYPE=1;
	public static final int EEGTYPE=2;
	public static final int SCI2TYPE=3;
	
	public static final int DOUBLETYPESHOW=4;
	public static final int SCITYPESHOW=5;
	public static final int EEGTYPESHOW=6;
	public static final int SCI2TYPESHOW=7;
	
	public static final int DOUBLETYPEREC=8;
	public static final int SCITYPEREC=9;
	public static final int EEGTYPEREC=10;
	public static final int SCI2TYPEREC=11;
	
	private Context context;
	public int boxingType;
	public int majuitimescale=0;
	public int majuirectimeScale=0;
	public int bannerSelect = 0;
	public int soundSelect=0;
	public int eegScale=0;
	public int eegrecScale=0;
	public int fudu=0;
	public int eegtimescale=0;
	public int shangxianshezValue;
	public int xiaxianshezValue;
	
	public int things;
	public boolean isStartRecord;
	public int msgindex;
	
	static mainset mmainset;
	public perinfomation mperinfomation=new perinfomation();
	
	public boolean isFilePrint  = false;
	public final boolean Debug=false;

	
	public static mainset getInstance()
	{
		if(mmainset==null)
		{
			mmainset=new mainset();
		}
		return mmainset;
	}
	public void setContext(Context context){
		this.context = context;
	}
	
	public void seteegtimescale(int eegtimescale)
	{
		this.eegtimescale=eegtimescale;
	}
	public int geteegtimescale()
	{
		return eegtimescale;
	}
	
	public void setmajuitimescale(int majuitimescale)
	{
		this.majuitimescale=majuitimescale;
	}
	public int getmajuitimescale()
	{
		return majuitimescale;
	}
	public void setmajuirectimescale(int majuirectimescale)
	{
		this.majuirectimeScale=majuirectimescale;
	}
	public int getmajuirectimescale()
	{
		return majuirectimeScale;
	}

	public void setbannerSelect(int bannerSelect)
	{
		this.bannerSelect=bannerSelect;
	}
	public int getbannerSelect()
	{
		return bannerSelect;
	}
	
	public void setSoundSelect(int soundSelect)
	{
		this.soundSelect=soundSelect;
	}
	public int getSoundSelect()
	{
		return soundSelect;
	}
	
	public void seteegScaleSelect(int eegScale)
	{
		this.eegScale=eegScale;
	}
	public int geteegScale()
	{
		return eegScale;
	}
	
	public void seteegrecScaleSelect(int eegrecScale)
	{
		this.eegrecScale=eegrecScale;
	}
	public int geteegrecScale()
	{
		return eegrecScale;
	}
	public void setfuduSelect(int fudu){
		this.fudu=fudu;
	}
	public int getfudu(){
		return this.fudu;
	}
	
	
	public void setshangxianshezValue(int shangxianshezValue)
	{
	    this.shangxianshezValue=shangxianshezValue;
	}
	public void setxiaxianshezValue(int xiaxianshezValue)
	{
		this.xiaxianshezValue=xiaxianshezValue;
	}
	public int getshangxianshezValue()
	{
		return this.shangxianshezValue;
	}
	public int getxiaxianshezValue()
	{
		return this.xiaxianshezValue;
	}

	public void setthings(int things)
	{
		this.things=things<<(8);
	}
	public int getthings()
	{
		return this.things;
	}

	public class warnValue
	{
		public boolean warnOn;
		public float toplevel;
		public float lowlevel;	
		
	}
	public int eventType;
	
	public class perinfomation
	{
		public String name;
		public String binlinao;
		public String sex;
		public String age;
		public int indexname;
		public int indexbinlinao;
		public int indexsex;
		public int indexage;
	}
	
	public ArrayList<Integer> CSI=new ArrayList<Integer>();
	public ArrayList<Integer[]> EEG=new ArrayList<Integer[]>();
	public ArrayList<Integer> TimeArray=new ArrayList<Integer>();
	public ArrayList<Integer> DataReceived=new ArrayList<Integer>();
	public ArrayList<Integer> BS=new ArrayList<Integer>();
	public ArrayList<Integer> EMG=new ArrayList<Integer>();
	public ArrayList<Integer> SQI=new ArrayList<Integer>();
	public ArrayList<Integer> BLACK=new ArrayList<Integer>();
	public ArrayList<Integer> WHITE=new ArrayList<Integer>();
	
	public boolean isConnected;
	public boolean isWarnConnected;
	public boolean isdongjie=false;
	public int csidongjielen;
	public int eegdongjielen;
	public int warnoff=0;
	public int timeOut;
	public boolean isRecData=false;
	public int curminTime;
	public int curmaxTime;
	
	public ArrayList<Integer> RecCSI=new ArrayList<Integer>();
	public ArrayList<Integer[]> RecEEG=new ArrayList<Integer[]>();
	public ArrayList<Integer> RecBS=new ArrayList<Integer>();
	public ArrayList<Integer> RecEMG=new ArrayList<Integer>();
	public ArrayList<Integer> RecSQI=new ArrayList<Integer>();
	public ArrayList<Integer> RecBLACK=new ArrayList<Integer>();
	public ArrayList<Integer> RecWHITE=new ArrayList<Integer>();
	
	public String RecName="";
	public String RecSex="";
	public String RecNO="";
	
//	public int[] CSISHOW={12,75,02,34,43,
//			16,70,04,24,43,
//			34,43,16,70,04,
//			43,16,70,04,24,
//			30,16,59,21,33,
//			12,75,02,34,43,
//			16,70,04,24,43,
//			34,43,16,70,04,
//			43,16,70,04,24,
//			30,16,59,21,33,
//			12,75,02,34,43,
//			16,70,04,24,43,
//			34,43,16,70,04,
//			43,16,70,04,24,
//			30,16,59,21,33,
//			16,70,04,24,43,
//			34,43,16,70,04,
//			43,16,70,04,24,
//			
//			34,43,16,70,04,
//			30,16,59,21,33,
//			16,70,04,24,43,
//			43,16,70,04,24,
//			16,70,04,24,43,
//			12,75,02,34,43,
//			34,43,16,70,04,	
//			30,16,59,21,33,
//			12,75,02,34,43,		
//			34,43,16,70,04,
//			43,16,70,04,24,
//			30,16,59,21,33,
//			34,43,16,70,04,
//			16,70,04,24,43,		
//			43,16,70,04,24,
//			12,75,02,34,43,
//			16,70,04,24,43,
//			43,16,70,04,24,};
	
	public int[] CSISHOW={/*2,7,9,11,15,
			17,14,13,11,10,
			13,15,19,21,26,
			23,21,20,27,29,
			33,35,38,40,43,
			41,39,36,34,32,
			37,41,46,50,53,
			55,56,57,59,65,
			71,77,70,63,78,
			80,82,84,85,71,
			66,62,58,54,52,
			53,55,57,59,61,
			63,69,70,77,80,
			71,77,70,63,78,
			66,62,58,54,52,
			53,55,57,59,61,
			65,69,74,76,82,
			85,87,89,91,90,
			
			66,62,58,54,52,
			53,55,57,59,61,
			63,69,70,77,80,
			2,7,9,11,15,
			33,35,38,40,43,
			41,39,36,34,32,
			37,41,46,50,53,
			55,56,57,59,65,
			71,77,70,63,78,
			80,82,84,85,71,		
			85,87,89,91,90,
			17,14,13,11,10,		
			71,77,70,63,78,
			66,62,58,54,52,
			53,55,57,59,61,
			13,15,19,21,26,
			23,21,20,27,29,
			65,69,74,76,82,*/
			100	,
			98	,
			99	,
			98	,
			93	,
			89	,
			87	,
			87	,
			86	,
			86	,
			85	,
			83	,
			84	,
			84	,
			83	,
			83	,
			82	,
			82	,
			81	,
			80	,
			78	,
			76	,
			74	,
			72	,
			69	,
			67	,
			65	,
			63	,
			60	,
			58	,
			57	,
			59	,
			55	,
			53	,
			51	,
			48	,
			47	,
			46	,
			45	,
			45	,
			44	,
			44	,
			43	,
			43	,
			46	,
			43	,
			43	,
			48	,
			43	,
			42	,
			42	,
			44	,
			42	,
			42	,
			44	,
			44	,
			42	,
			40	,
			38	,
			37	,
			37	,
			36	,
			37	,
			37	,
			37	,
			36	,
			36	,
			36	,
			36	,
			37	,
			37	,
			39	,
			37	,
			37	,
			39	,
			37	,
			37	,
			38	,
			37	,
			37	,
			38	,
			39	,
			41	,
			43	,
			45	,
			47	,
			46	,
			45	,
			44	,
			44	,
			43	,
			43	,
			43	,
			43	,
			42	,
			42	,
			42	,
			42	,
			42	,
			42	,
			42	,
			43	,
			43	,
			43	,
			44	,
			44	,
			45	,
			45	,
			45	,
			45	,
			45	,
			44	,
			44	,
			44	,
			44	,
			44	,
			44	,
			44	,
			45	,
			45	,
			45	,
			46	,
			46	,
			46	,
			43	,
			43	,
			43	,
			44	,
			44	,
			44	,
			44	,
			45	,
			45	,
			45	,
			45	,
			47	,
			47	,
			47	,
			49	,
			52	,
			54	,
			53	,
			56	,
			56	,
			53	,
			54	,
			55	,
			58	,
			62	,
			61	,
			61	,
			60	,
			60	,
			61	,
			63	,
			67	,
			66	,
			69	,
			70	,
			73	,
			75	,
			76	,
			77	,
			78	,
			80	,
			82	,
			83	,
			86	,
			84	,
			88	,
			87	,
			89	,
			89	,
			90	,
			92	,
			90	,
			92	,
			93	,
			95	,
			99	,

			};
	public int[] BSSHOW={/*2,2,3,3,4,
			5,5,7,7,6,
			2,7,9,11,15,
			2,2,3,3,4,
			5,5,7,7,6,
			2,7,9,11,15,
			2,2,3,3,4,
			5,5,7,7,6,
			2,7,9,11,15,
			2,2,3,3,4,
			5,5,7,7,6,
			2,7,9,11,15,
			33,35,38,40,43,
			41,39,36,34,32,
			37,41,46,50,53,
			53,55,57,59,61,
			65,69,74,76,82,
			85,87,89,91,90,
			
			2,2,3,3,4,
			5,5,7,7,6,
			2,7,9,11,15,
			2,2,3,3,4,
			5,5,7,7,6,
			2,7,9,11,15,
			2,2,3,3,4,
			5,5,7,7,6,
			2,7,9,11,15,
			2,2,3,3,4,
			5,5,7,7,6,
			2,7,9,11,15,
			33,35,38,40,43,
			41,39,36,34,32,
			37,41,46,50,53,
			53,55,57,59,61,
			65,69,74,76,82,
			85,87,89,91,90,*/
			0	,
			2	,
			1	,
			2	,
			7	,
			9	,
			11	,
			13	,
			14	,
			14	,
			15	,
			17	,
			15	,
			16	,
			17	,
			17	,
			19	,
			17	,
			19	,
			20	,
			22	,
			24	,
			26	,
			28	,
			31	,
			33	,
			35	,
			37	,
			40	,
			42	,
			44	,
			42	,
			45	,
			47	,
			49	,
			48	,
			47	,
			46	,
			45	,
			45	,
			44	,
			44	,
			43	,
			43	,
			46	,
			43	,
			43	,
			48	,
			43	,
			42	,
			42	,
			44	,
			42	,
			42	,
			44	,
			44	,
			42	,
			40	,
			48	,
			47	,
			47	,
			46	,
			51	,
			52	,
			48	,
			46	,
			46	,
			39	,
			38	,
			40	,
			42	,
			44	,
			47	,
			47	,
			49	,
			47	,
			47	,
			48	,
			47	,
			47	,
			48	,
			49	,
			44	,
			43	,
			45	,
			47	,
			46	,
			45	,
			44	,
			44	,
			43	,
			43	,
			43	,
			43	,
			42	,
			42	,
			42	,
			42	,
			42	,
			42	,
			42	,
			43	,
			43	,
			43	,
			44	,
			44	,
			45	,
			45	,
			45	,
			45	,
			45	,
			44	,
			44	,
			44	,
			44	,
			44	,
			44	,
			44	,
			45	,
			45	,
			45	,
			46	,
			46	,
			46	,
			43	,
			43	,
			43	,
			44	,
			44	,
			44	,
			44	,
			45	,
			45	,
			45	,
			45	,
			47	,
			47	,
			47	,
			49	,
			42	,
			44	,
			43	,
			30	,
			36	,
			33	,
			34	,
			35	,
			38	,
			32	,
			31	,
			31	,
			30	,
			30	,
			31	,
			28	,
			27	,
			26	,
			22	,
			20	,
			23	,
			25	,
			26	,
			27	,
			18	,
			17	,
			15	,
			13	,
			16	,
			14	,
			11	,
			10	,
			9	,
			9	,
			7	,
			8	,
			6	,
			4	,
			3	,
			2	,
			1	,
			};
	public int[] EEGSHOW={
			0x0B, 0x12, 0x00, 0x00, 0x00, 0x45, 0x30, 0x01, 0x64, 0x00, 
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x11, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, 0xF4, 0xFE, 
			0x0A, 0x0D, 0x07, 0x03, 0x07, 0x07, 0xFD, 0xF0, 0xF0, 0xF9, 
			0x02, 0x05, 0x05, 0x06, 0x09, 0x0D, 0x07, 0xF8, 0xEF, 0xF5,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06,  // 1
			0x0B, 0x09, 0xFB, 0xEF, 0xF1, 0xFC, 0x00, 0x00, 0x02, 0x08, 
			
			0x0D, 0x0D, 0x04, 0xF7, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x89,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, 
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 2
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, // 3
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 4
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 5
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 , // 6
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, // 7
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 8
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x0D, 0x0D, 0x04, 0xF7, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x89,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, 
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 9
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 10
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, // 11
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, // 12
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0x0D, 0x0D, 0x04, 0xF7, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x89,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, // 13
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 14
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C, // 15
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 16
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 17
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 18
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, // 18
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 19
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
	//22		
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 20
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 21
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, // 22
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, // 23
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 24
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0x0D, 0x0D, 0x04, 0xF7, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x89,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, 
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 25
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, // 26
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 27
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, // 28
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 , // 29
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0x0B, 0x12, 0x00, 0x00, 0x00, 0x45, 0x30, 0x01, 0x64, 0x00, 
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x11, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, 0xF4, 0xFE, 
			0x0A, 0x0D, 0x07, 0x03, 0x07, 0x07, 0xFD, 0xF0, 0xF0, 0xF9, 
			0x02, 0x05, 0x05, 0x06, 0x09, 0x0D, 0x07, 0xF8, 0xEF, 0xF5,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06,  // 1
			0x0B, 0x09, 0xFB, 0xEF, 0xF1, 0xFC, 0x00, 0x00, 0x02, 0x08, 
			
			0x0D, 0x0D, 0x04, 0xF7, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x89,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, 
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 2
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, // 3
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 4
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 5
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 , // 6
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, // 7
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 8
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x0D, 0x0D, 0x04, 0xF7, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x89,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, 
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 9
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 10
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, // 11
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, // 12
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0x0D, 0x0D, 0x04, 0xF7, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x89,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, // 13
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 14
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C, // 15
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 16
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 17
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 18
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, // 18
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2, // 19
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
	//22		
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 20
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 21
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, // 22
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, // 23
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 24
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0x0D, 0x0D, 0x04, 0xF7, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x89,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, 
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, // 25
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0x01, 0x0E, 0x11, 0x09, 0x00, 0xF7, 0xFA, 0xF2, 0xF8, 0xF4,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, // 26
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, // 27
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 ,
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2, // 28
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 
			0xFD, 0xF9, 0xF4, 0xF3, 0xFB, 0x09, 0x10, 0x0A, 0x03, 0x04 ,
			
			0x18, 0x41, 0x10, 0x0D, 0x03, 0xFF, 0x01, 0xFE, 0xF6, 0xF2,
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5, 
			0xFA, 0xFC, 0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD,
			0xF7, 0xF8, 0x04, 0x10, 0x0F, 0x05, 0xFE, 0xFD, 0x03, 0x04 , // 29
			0xF4, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
			0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 0xFE, 0xF6, 0xF2,
			0x0A, 0x03, 0x04, 0xF2, 0xF7, 0xFD, 0xFB, 0xF8, 0x10, 0x0C,
			0x00, 0x00, 0xC8, 0xCA, 0x3C, 0x19, 0x00, 0x00, 0x00, 0x00, 
			0x06, 0xFF, 0xF3, 0xF0, 0xF6, 0x00, 0x08, 0x09, 0x06, 0x06, 
			0xFE, 0xFE, 0xFD, 0x02, 0x0B, 0x10, 0x0C, 0x01, 0xF7, 0xF5,
	};
	
	public int width;
	public int height;
	public int day;
	public int year;
	public int mon;
	public int hour;
	public int min;
	public int sec;
	public Bitmap taijilogo;
	
	
	public String recstime;
	public String recetime;
//	public po
	
	public Point mspoint[]=new Point[8];
	public float msiy[]=new float[5];
	public float msix[]=new float[40];
	public float msey[]=new float[5];
	public float msex[]=new float[40];
	public String YearStr;
	public String HourStr;
	public String useTime;
	SimpleDateFormat  sdf=new SimpleDateFormat("yyyy/MM/dd");
	SimpleDateFormat  sdf1=new SimpleDateFormat("HH:mm");
	public boolean isPrintOrignFile = false;
	public Bitmap genBitmap()
	{		
		Bitmap bmp = Bitmap.createBitmap(1400,520, Bitmap.Config.ARGB_8888);
		Canvas mCanvas = new Canvas(bmp);
		Paint CoordinatePaint=new Paint();
		CoordinatePaint.setColor(Color.BLACK);
		CoordinatePaint.setStrokeWidth(2);
//		taijilogo=BitmapFactory.decodeResource(resources, R.drawable.black2);
		
		Paint mGLinePaint=new Paint();
		mGLinePaint.setColor(0xee000000);
		mGLinePaint.setStrokeWidth(1.0f);
		PathEffect effects = new DashPathEffect(new float[]{10,10,10,10},1);  
		mGLinePaint.setPathEffect(effects);
		
		Paint CoordTextPaint=new Paint();
		CoordTextPaint.setColor(0xee222222);
		CoordTextPaint.setTextSize(16);
		
		Paint WhitePaint=new Paint();
		WhitePaint.setColor(0xff112222);
		WhitePaint.setTextSize(24);
		CoordinatePaint.setStrokeWidth(2);
		
		Paint WhitePaint2=new Paint();
		WhitePaint.setColor(0xff112222);
		WhitePaint.setTextSize(20);
		
		int w=taijilogo.getWidth();
		int h=taijilogo.getHeight();
		int tmpSize;
		int drawStarttime = 0;
		int drawEndtime;
		Path miLinePath=new Path();
		Path meLinePath=new Path();
		
		Paint mSLinePaint = new Paint();
		mSLinePaint.setColor(0xffeeaa22);
		mSLinePaint.setAntiAlias(true);
		mSLinePaint.setStyle(Paint.Style.STROKE);
		mSLinePaint.setPathEffect(new CornerPathEffect(10));
		mSLinePaint.setStrokeCap(Paint.Cap.ROUND);
		mSLinePaint.setStrokeWidth(2);
		
		Paint mELinePaint = new Paint();
		mELinePaint.setColor(0xffff7799);
		mELinePaint.setAntiAlias(true);
		mELinePaint.setStyle(Paint.Style.STROKE);
		mELinePaint.setPathEffect(new CornerPathEffect(10));
		mELinePaint.setStrokeCap(Paint.Cap.ROUND);
		mELinePaint.setStrokeWidth(2);
		
		mCanvas.drawBitmap(taijilogo, new Rect(0,0,w,h), new Rect(mspoint[0].x,0,w,38),new Paint());
		if(isRecData){
			mCanvas.drawText(context.getString(R.string.bianhao), 200+20, 20, WhitePaint);
			mCanvas.drawText(RecNO, 280, 20, WhitePaint);
			mCanvas.drawText(context.getString(R.string.xingming), 400, 20, WhitePaint);
			mCanvas.drawText(RecName, 460, 20, WhitePaint);
			mCanvas.drawText(context.getString(R.string.xingbietitle), 600, 20, WhitePaint);
			mCanvas.drawText(RecSex, 660, 20, WhitePaint);
		}else{
			mCanvas.drawText(context.getString(R.string.bianhao), 200+20, 20, WhitePaint);
			mCanvas.drawText(mperinfomation.binlinao, 280, 20, WhitePaint);
			mCanvas.drawText(context.getString(R.string.xingming), 400, 20, WhitePaint);
			mCanvas.drawText(mperinfomation.name, 460, 20, WhitePaint);
			mCanvas.drawText(context.getString(R.string.xingbietitle), 600, 20, WhitePaint);
			mCanvas.drawText(mperinfomation.sex, 660, 20, WhitePaint);
		}
		
		mCanvas.drawText(context.getString(R.string.print_start_time), 720, 10, WhitePaint2);
		if(isRecData)
		{
			tmpSize=RecCSI.size();
			mCanvas.drawText(recstime,840,10,WhitePaint2);			
		}
		else
		{
			tmpSize=CSI.size();
			mCanvas.drawText(YearStr+" "+HourStr,840,10,WhitePaint2);		
		}
//		if(tmpSize>18000)
//		{
//			drawStarttime=tmpSize-18000;
//		}
//		else
//		{
//			drawStarttime=0;
//		}
		float iscalex=(msix[1]-msix[0])/15;
		float iscalex2=(msix[1]-msix[0]);
		float iscaley=(msiy[1]-msiy[0])/20;
		float iscaley2=(msiy[1]-msiy[0]);
		int iscale=30;
//		if(tmpSize>18000){
//			iscale=(tmpSize/40)/15;
//		}
		
//		float escalex=(msex[1]-msex[0])/24;
//		float escaley=(msex[1]-msex[0])/64;
//		
		float escalex=(msix[1]-msix[0])/15;
		float escalex2=(msix[1]-msix[0]);
        float escaley=(msiy[4]-msiy[2])/20;
        float escaley2=(msiy[4]-msiy[2]);     
		int escale=30;
		if(Debug)
		{
			iscalex=(msix[1]-msix[0])/6;
			escalex=(msex[1]-msex[0])/12;
			iscale=2;
			escale=1;	
			drawStarttime=0;
			tmpSize=CSISHOW.length;
		}
		iscale =3;
	    escale =3;
	    if(tmpSize>18000)
		{
			drawStarttime=tmpSize-18000;
			iscalex = (mspoint[5].x-mspoint[0].x)/18000.0f;
		}
		else
		{
			drawStarttime=0;
			iscalex = (mspoint[5].x-mspoint[0].x)/18000.0f;
		}
	  
		
//		if(isFilePrint){
//			//Log.i("mainset","liuliangxiang isFilePrint");
//		    iscale =3;
//		    escale =3;
//		    if(tmpSize>18000)
//			{
//				drawStarttime=tmpSize-18000;
//				iscalex = (mspoint[5].x-mspoint[0].x)/18000;
//			}
//			else
//			{
//				drawStarttime=0;
//				iscalex = (mspoint[5].x-mspoint[0].x)/18000;
//			}
//		    
//		}
//		
		if(isPrintOrignFile){
			iscale =1;
		    escale =1;
		    isPrintOrignFile = false;
		  //  Log.i("mainset", "liuliangxiang isPrintOrignFile="+isPrintOrignFile);
		 //   Log.i("mainset", "liuliangxiang (mspoint[5].x-mspoint[0].x)="+(mspoint[5].x-mspoint[0].x));
		    if(tmpSize>600)
			{
				drawStarttime=tmpSize-600;
				iscalex = (mspoint[5].x-mspoint[0].x)/600.0f;
			}
			else
			{
				drawStarttime=0;
				iscalex = (mspoint[5].x-mspoint[0].x)/600.0f;
			}
		}
	//	Log.i("mainset", "liuliangxiang tempSize="+tmpSize);
//		Log.i("mainset", "liuliangxiang iscalex="+iscalex);
		mCanvas.drawText(context.getString(R.string.print_use_time), 720, 32, WhitePaint2);
		mCanvas.drawText(formatdate(curmaxTime-curminTime), 840, 32, WhitePaint2);
		
		mCanvas.drawText(context.getString(R.string.print_end_time), 980, 10, WhitePaint2);
		if(isRecData)
		{
			mCanvas.drawText(recetime,1080,10,WhitePaint2);
		}
		else
		{
			mCanvas.drawText(getEndTime(),1080,10,WhitePaint2);
		}
		mCanvas.drawText(context.getString(R.string.print_now_time), 980, 32, WhitePaint2);
		mCanvas.drawText(sdf.format(new Date())+" "+sdf1.format(new Date()),1080 , 32, WhitePaint2);
		
		mCanvas.drawLine(mspoint[0].x, mspoint[0].y, mspoint[1].x, mspoint[1].y, CoordinatePaint);
		mCanvas.drawLine(mspoint[1].x, mspoint[1].y, mspoint[5].x, mspoint[5].y, CoordinatePaint);
		mCanvas.drawLine(mspoint[2].x, mspoint[2].y, mspoint[4].x, mspoint[4].y, CoordinatePaint);
		mCanvas.drawLine(mspoint[4].x, mspoint[4].y, mspoint[7].x, mspoint[4].y, CoordinatePaint);
	//	mCanvas.drawLine(spoint[5].x, spoint[5].y, spoint[9].x, spoint[9].y, CoordinatePaint);
		
		for(int i=0;i<msiy.length;i=i+1)
		{
			mCanvas.drawLine(mspoint[0].x, msiy[i], mspoint[5].x, msiy[i], mGLinePaint);
		}
		for(int j=0;j<msix.length;j=j+1)
		{
			mCanvas.drawLine(msix[j],mspoint[0].y ,msix[j], mspoint[1].y, mGLinePaint);
		}
		
		for(int i=0;i<msey.length;i=i+1)
		{
			mCanvas.drawLine(mspoint[2].x, msey[i], mspoint[6].x, msey[i], mGLinePaint);
		}
		for(int j=0;j<msex.length;j=j+1)
		{
			mCanvas.drawLine(msex[j],mspoint[2].y ,msex[j], mspoint[4].y, mGLinePaint);
		}
		
		mCanvas.drawText("100",mspoint[0].x-28, msiy[0]+8, CoordTextPaint);
		mCanvas.drawText("80",mspoint[0].x-28, msiy[1]+8, CoordTextPaint);
		mCanvas.drawText("60",mspoint[0].x-28, msiy[2]+8, CoordTextPaint);
		mCanvas.drawText("40",mspoint[0].x-28, msiy[3]+8, CoordTextPaint);
		mCanvas.drawText("20",mspoint[0].x-28, msiy[4]+8, CoordTextPaint);
		mCanvas.drawText("0",mspoint[0].x-12, mspoint[1].y-2, CoordTextPaint);
		
		mCanvas.drawText("100",mspoint[0].x-28, msey[0]+8, CoordTextPaint);
		mCanvas.drawText("80",mspoint[0].x-28, msey[1]+8, CoordTextPaint);
		mCanvas.drawText("60",mspoint[0].x-28, msey[2]+8, CoordTextPaint);
		mCanvas.drawText("40",mspoint[0].x-28, msey[3]+8, CoordTextPaint);
		mCanvas.drawText("20",mspoint[0].x-28, msey[4]+8, CoordTextPaint);
		mCanvas.drawText("0",mspoint[0].x-12, mspoint[4].y-2, CoordTextPaint);
		mCanvas.drawText("CSI", mspoint[5].x-30, mspoint[0].y+30, WhitePaint);
		mCanvas.drawText("BS", mspoint[5].x-30, mspoint[2].y+30, WhitePaint);	
		
		float hx = mspoint[1].x;
		float hy = mspoint[1].y;
		int temp = 0;
		String things="";
		String prethings="";
		Integer[] EEGData;
		miLinePath.reset();
		meLinePath.reset();
		if(!Debug)
		{
			if(isRecData)
			{
				if(RecCSI.size()<=0)
				{
					return bmp;
				}
			}
			else
			{
				if(mmainset.CSI.size()<=0)
					return bmp;
			}
		}
		
		if(drawStarttime==0)
		{
			miLinePath.moveTo(mspoint[1].x,mspoint[1].y);
		}
		else
		{	
			// = CSI.get(drawStarttime)&0xff;
			if(isRecData)
			{
				temp = RecCSI.get(drawStarttime)&0xff;
			}
			else
			{
				temp = CSI.get(drawStarttime)&0xff;
			}
			if(Debug)
			{
				temp=CSISHOW[drawStarttime]&0xff;
			}
			int SCIData=0;
			if(temp>100)
				temp=0;
			SCIData=100-temp;
			if(SCIData<100)
				hy=msiy[SCIData/20]+iscaley*(SCIData%20);
			else if(SCIData==0)
				hy=mspoint[0].y;
			else if(SCIData==100)
				hy=mspoint[1].y;
			miLinePath.moveTo(hx,hy);
		}
		for(int i=drawStarttime+iscale;i<tmpSize;i=i+iscale)
		{	
			boolean isNeedDraw =false;
			hx=hx+iscalex*iscale;
			
			if(Debug)
			{
				temp=CSISHOW[i]&0xff;
			}
			else
			{
				if(isRecData)
				{
					temp = RecCSI.get(i)&0xff;
					things=getThingFromCSI(RecCSI.get(i));
					if(!things.equals(prethings))
					{
						prethings = things;
						isNeedDraw=true;					
					}
				}
				else
				{
					temp = CSI.get(i)&0xff;
					things=getThingFromCSI(CSI.get(i));
					if(!things.equals(prethings))
					{
						prethings = things;
						isNeedDraw=true;					
					}
				}
			}
			int SCIData=0;
			if(temp>100)
				temp=0;
			SCIData=100-temp;
			if(SCIData<100)
				hy=msiy[SCIData/20]+iscaley*(SCIData%20);
			else if(SCIData==0)
				hy=mspoint[0].y;
			else if(SCIData==100)
				hy=mspoint[1].y;
			if(isNeedDraw)
			{
				mCanvas.drawText(things, hx, mspoint[0].y+30, WhitePaint);
			}
			miLinePath.lineTo(hx, hy);		
		}
		miLinePath.moveTo(hx,hy);
		if(!Debug)
		{
			if(isRecData)
			{
				mCanvas.drawPath(miLinePath, mSLinePaint);
			}
			else
			{
				if((mmainset.isConnected)&&(!mmainset.isWarnConnected))
					mCanvas.drawPath(miLinePath, mSLinePaint);
			}
		}
		else
		{
			mCanvas.drawPath(miLinePath, mSLinePaint);
		}
		miLinePath.close();
		miLinePath.reset();
		
		if(!Debug)
		{
			if(isRecData)
			{
				if(RecBS.size()<=0)
				{
					return bmp;
				}
			}
			else
			{
				if(mmainset.BS.size()<=0)
					return bmp;
			}
		}
		
		hx = mspoint[4].x;
        hy = mspoint[4].y;
		
		if(drawStarttime==0)
		{
			miLinePath.moveTo(mspoint[4].x,mspoint[4].y);
		}
		else
		{	
			// = CSI.get(drawStarttime)&0xff;
			if(isRecData)
			{
				temp = RecBS.get(drawStarttime)&0xff;
			}
			else
			{
				temp = BS.get(drawStarttime)&0xff;
			}
			if(Debug)
			{
				temp=BSSHOW[drawStarttime]&0xff;
			}
			int SCIData=0;
			if(temp>100)
				temp=0;
			SCIData=100-temp;
			if(SCIData<100)
				hy=msey[SCIData/20]+iscaley*(SCIData%20);
			else if(SCIData==0)
				hy=mspoint[2].y;
			else if(SCIData==100)
				hy=mspoint[4].y;
			miLinePath.moveTo(hx,hy);
		}
		for(int i=drawStarttime+iscale;i<tmpSize;i=i+iscale)
		{	
			boolean isNeedDraw =false;
			hx=hx+iscalex*iscale;
			
			if(Debug)
			{
				temp=BSSHOW[i]&0xff;
			}
			else
			{
				if(isRecData)
				{
					temp = RecBS.get(i)&0xff;
					//things=getThingFromCSI(RecBS.get(i));
//					if(!things.equals(prethings))
//					{
//						prethings = things;
//						isNeedDraw=true;					
//					}
				}
				else
				{
					temp = BS.get(i)&0xff;
//					things=getThingFromCSI(BS.get(i));
//					if(!things.equals(prethings))
//					{
//						prethings = things;
//						isNeedDraw=true;					
//					}
				}
			}
			int SCIData=0;
			if(temp>100)
				temp=0;
			SCIData=100-temp;
			if(SCIData<100)
				hy=msey[SCIData/20]+iscaley*(SCIData%20);
			else if(SCIData==0)
				hy=mspoint[2].y;
			else if(SCIData==100)
				hy=mspoint[4].y;
//			if(isNeedDraw)
//			{
//				mCanvas.drawText(things, hx, mspoint[2].y+30, WhitePaint);
//			}
			miLinePath.lineTo(hx, hy);		
		}
		miLinePath.moveTo(hx,hy);
		if(!Debug)
		{
			if(isRecData)
			{
				mCanvas.drawPath(miLinePath, mSLinePaint);
			}
			else
			{
				if((mmainset.isConnected)&&(!mmainset.isWarnConnected))
					mCanvas.drawPath(miLinePath, mSLinePaint);
			}
		}
		else
		{
			mCanvas.drawPath(miLinePath, mSLinePaint);
		}
		miLinePath.close();
		miLinePath.reset();
		if(isFilePrint){
		    isRecData = false;
		    isFilePrint = false;
		}
		return bmp;
	}
	
	private String getEndTime()
	{
		return getDisplaytime(CSI.size());
		
	}
	public String getDisplaytime(int time)
	{
		int sec=this.sec+time;
		int min = this.min;
		int hour = this.hour;
		int day= this.day;
		int month= this.mon;
		int year =this.year;
		if(sec>=60)
		{		
			min=min+sec/60;
			sec=sec%60;
			if(min>=60)
			{
				hour=hour+min/60;
				min=min%60;
				if(hour>=24)
				{
					day=hour+hour/24;
					hour=hour%24;
					while(day>=getDayofMonth(year,month))
					{				
						day=day-getDayofMonth(year,month);
						month=month+1;
						if(month>12)
						{
							year++;
							month=month-12;
						}
							
					}
				}
				
			}
		}
	//	return int2time(year)+"."+int2time(month)+"."+int2time(day)+"  "+int2time(hour)+":"+Integer.toString(min)+":"+Integer.toString(sec);
		return int2time(year)+"/"+int2time(month)+"/"+int2time(day)+" "+int2time(hour)+":"+int2time(min);
	}
	private String int2time(int time)
	{
		if(time>=10)
		{
			return Integer.toString(time);
		}
		else
		{
			return "0"+Integer.toString(time);
		}
	}
	public int getDayofMonth(int year,int month)
	{
		switch(month)
		{
			case 1:
			case 3:
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				return 31;
			case 2:
				if(year%10==0)
				{
					if(year%40==0)
						return 29;
				}
				else
				{
					if(year%4==0)
						return 29;
				}
				return 28;
			case 4:
			case 6:
			case 9:
			case 11:
				return 30;
			default:
				return 30;
		}
	}
	
	public String getThingFromCSI(int data)
	{
		String a = "";
		if((data>>8)%8==0x0)
		{
			if(data>=8){
				a="";
			}else{
				a=context.getString(R.string.youdao);
			}
		}
		else if((data>>8)%8==0x1)
		{
			a=context.getString(R.string.chaguan);
		}
		if((data>>8)%8==0x2)
		{
			a=context.getString(R.string.weichi);
		}
		if((data>>8)%8==0x3)
		{
			a=context.getString(R.string.waike);
		}
		if((data>>8)%8==0x4)
		{
			a=context.getString(R.string.zhushe);
		}
		if((data>>8)%8==0x5)
		{
			a=context.getString(R.string.beizhu);
		}
		if((data>>8)%8==0x6)
		{
			a=context.getString(R.string.weichijies);
		}
		if((data>>8)%8==0x7)
		{
			a=context.getString(R.string.yidong);
		} 
		if((data>>8)%8==0x8)
		{
			a=" ";
		} 
		
		return (a);
	}
	
	public String formatdate(long time)
	{
		int hour=(int)(time/3600);
		int minute=(int)(time%3600/60);
		int second=(int)(time%60);
		String strhour=(hour<10)?String.format("0%d:", hour):String.format("%d:", hour);
		String strminute=(minute<10)?String.format("0%d:", minute):String.format("%d:", minute);
		String strsecond=(second<10)?String.format("0%d", second):String.format("%d", second);
		return strhour+strminute+strsecond;
	}
	
}
